# -*- coding: utf-8 -*-
# $Id$
#
# custom checks
# Copyright (C) 2005, 2006, 2007  Tim Blechmann
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# $Revision$
# $LastChangedRevision$
# $LastChangedDate$
# $LastChangedBy$


######################################################################
#
# endianness checks
#

def check_compiler_defined_endianness(ctx):
    ctx.Message('Checking if the compiler defines the endianness... ')

    test = """
    #include <stdio.h>
        int main() {
            #if defined(__BIG_ENDIAN__) || defined(__LITTLE_ENDIAN__)
                // already defined, no need to define again
                return 0;
            #else
                return 1;
            #endif
        }
    """

    result = ctx.TryRun(test, '.c')[0]
    ctx.Result(result)

    return result


## def define_endianness(ctx):
##     ctx.Message('Checking for endianness ... ')

##     test = """
##         int main() {
##                 int i = 1;
##                 char *c = (char *) &i;
##                 return c[0] != 1;
##         }
##     """

##     result = not ctx.TryRun(test, '.c')[0]

##     if result:
##         endianness = "__BIG_ENDIAN__"
##     else:
##         endianness = "__LITTLE_ENDIAN__"

##     ctx.Result(endianness)

##     ctx.sconf.env.Append(CPPDEFINES=[endianness])
##     return endianness


######################################################################
#
# pointer alignment checks
#

def check_aligned_pointers(ctx):
    ctx.Message('Checking if compiler supports aligned pointers... ')

    test = """
    typedef float aligned_float __attribute__((aligned(4 * sizeof(float))));

    int main()
    {
        aligned_float flt;
        aligned_float * ptr;
        aligned_float* va[64];
    }

    """

    result = ctx.TryCompile(test, '.cpp')
    ctx.Result(result)
    return result

def check_restricted_pointer(ctx):
    ctx.Message('Checking if compiler supports restricted pointers... ')

    test = """
    typedef float *__restrict__ restricted_ptr;
    void foo(restricted_ptr ptr1, restricted_ptr ptr2)
    {
    }

    int main()
    {
    }

    """

    result = ctx.TryCompile(test, '.cpp')
    ctx.Result(result)
    return result


######################################################################
#
# flag checks
#

def CheckCFlag(ctx, flag, autoadd=True):
    ctx.Message('Checking for C compiler flag %s ' % flag)

    flag = flag.split()
    lastCCFLAGS = ctx.env.get('CCFLAGS')

    test = """
        int main() {
                return 0;
        }
    """


    ctx.env.Append(CCFLAGS=[flag])


    result = ctx.TryCompile(test, '.c')
    if not result or not autoadd:
        ctx.env.Replace(CCFLAGS = lastCCFLAGS)

    ctx.Result(result)

    return result


def CheckCXXFlag(ctx, flag, autoadd=True):
    ctx.Message('Checking for C++ compiler flag %s ' % flag)

    flag = flag.split()
    lastCXXFLAGS = ctx.env.get('CXXFLAGS')

    test = """
        int main() {
                return 0;
        }
    """

    ctx.env.Append(CXXFLAGS=[flag])

    result = ctx.TryLink(test, '.cpp')
    if not result or not autoadd:
        ctx.env.Replace(CXXFLAGS = lastCXXFLAGS)

    ctx.Result(result)

    return result



custom_checks =  { 'CheckEndiannessDefined' : check_compiler_defined_endianness,
##                    'DefineEndianness' : define_endianness,
                   'CheckAlignedPointer' : check_aligned_pointers,
                   'CheckRestrictedPointer' : check_restricted_pointer,
                   'CheckCFlag' : CheckCFlag,
                   'CheckCXXFlag' : CheckCXXFlag,

                   }

Return("custom_checks")
