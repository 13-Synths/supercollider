New SC documentation system, work in progress
=============================================
Much more information can be read here: https://docs.google.com/document/edit?id=13jY-FLhwFYgzGFVTSb31eTZOsxl77eVLxuCIsXcZ7BE&hl=en&authkey=CJu58MQJ

The markup language parser is in ScDoc.sc, copy or symlink this to your Extensions folder.
Try it like this:

p = ScDocParser.new
p.parseFile("/home/lijon/Coding/ScDoc/test.schelp").dump
p.findNode("summary").text

p.parseFile("/home/lijon/Coding/ScDoc/Array.schelp")
p.renderHTML("scdoc_test.html")

p.parse("inline code::code example::.").dump

tag             hasText hasChilds structural needClose modal nestable
---------------------------------------------------------------------
title           S
class           S
doctype         S
keywords        S
related         S
summary         S
note            S
warning         S
section         S       x         1
subsection      S       x         2
classmethod     S       x         3
instancemethod  S       x         3
argument        S       x         4
description             x         1
methods                 x         1
examples                x         1
list                    x                    x               x
numberedlist            x                    x               x
definitionlist          x                    x               x
table                   x                    x               x
code            V                            x        x
link            V                            x        x
emphasis        V                            x        x
##
||
(prose)         V

hasText: tag captures text
    S is single-line (terminated by newline)
    V is variable-line
hasChilds: tag captures child-elements
structural: tag has structural level
needClose: tag needs closing by ::
modal: tag ignores any other tags than closing tag and do not nest
nestable: tag can nest

Note:
- modal tags can be written as inline: opening and closing tag on the same line
  or block-style: where the closing tag must be a single :: on its own line.
- single vs variable line is only applicable for tags that captures text.
- modal, level and nestable are exclusive. nestable can be seen as a structural tag
  without explicit level. It's also because of the explicit level that the structural
  tags don't need closing.
- structural-needClose-modal-nestable could be reduced to one column:
  1-4 : level, no close tag
  M   : modal, need close tag
  N   : nestable, need close tag

All in all we have 6 different categories of tags, not counting the internal 'prose' tag:
- hasTextS: line terminated simple tag, captures text
- hasTextS-hasChilds-structural: line terminated structural tag, captures text and children elements
- hasChilds-structural: unnamed structural tag, captures children elements
- hasChilds-needClose-nestable: nestable tag that needs closing, captures children elements
- hasTextV-needClose-modal: modal tag that needs closing, captures text
- delimiters: separator tag, does not capture anything

TODO
====
- split renderer into a separate class? then it's easy to make different renderers that conform to a common interface..

- handle categories::, should it output anything or is it just metadata?

HTML renderer stuff:
- handle "see also"
- handle docType (class/other)
- handle prose before first section..
- other sections? not allowed in class doc?
- split multiple methods by whitespace and/or comma, so one can do "method:: ar kr"

- Overview generations:
  All documents alphabetically
  All documents by categories
  All documents by keywords
  All classes by inheritance tree
  All classes alphabetically
  All classes by categories
  All ugens alphabetically
  All ugens by categories
  All methods

- Code to traverse a directory tree of doc source files and render into another directory tree, checking time-stamps to see if files need update or not. keep track of directory level so we can use relative URL's..
- generate simple doc for classes not having a doc source file. (just list all methods and their args)

- Handle extensions (extra classes and method additions)
should merge stuff into the tree before parsing..

- validation pass:
start by looking up the docType tag in the tree (root level), then we know which tags are allowed and not.

Some tags should only be allowed once. like class, title, related, keywords, summary, description, methods, examples..
Keep a dictionary with tag occurence count?

Also make sure ## and || only happens inside lists?

- parser: Don't split by lines but pass newlines to handleWord and let it call endLine for us? and inc lineno..
important: then we must check if the whitespace-word contains newline... (or create a regex rule that matches single newlines?)
also let handleWord inc wordno..
note: we could then also match blank lines by regex "\n\n*" and pass them to handleWord to split prose nodes.

