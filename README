SuperCollider documentation system
==================================

INSTALLATION
------------
All SCDoc classes are in the subfolder "SCDoc", copy or symlink this folder to your SuperCollider Extensions folder.


USAGE
-----
To render and generate all docs:

SCDoc.helpSourceDir = "/path/to/HelpSource";
SCDoc.updateAll;

Now all your rendered HTML help is in SCDoc.helpTargetDir, which defaults to ~/share/SuperCollider/Help on Linux and ~/Application Support/SuperCollider/Help on OSX.

To render just one file:

SCDoc.helpSourceDir = "/path/to/HelpSource";
SCDoc.readDocMap;
SCDoc.updateFile("/path/to/HelpSource/and/your/file.schelp",true);

See these generated helpfiles for more info about ScDoc:

- Help/Reference/SCDocSyntax.html
- Help/Guides/WritingHelp.html
- Help/Classes/SCDoc.html
- Help/Classes/SCDocParser.html
- Help/Classes/SCDocRenderer.html


TODO
----

integration with frontends / main sc distro
===========================================
* update docs automatically when needed. Make an SCDoc.checkUpdate that returns fast if nothing needs to be done, otherwise calls SCDoc.updateAll.

Save a list of all classes so that we can detect if any new ones where added (extensions).
    x = Class.allClasses.collectAs(_.name,IdentitySet)

Only update overviews (methods, classes, classtree) when this list changed.. no need to update those if it was only help-files that changed. same with JSON method index.

Check each class in above Set for update like this:
    1) class was not in the set above (x.includes(\SinOsc))
    2) class source file is newer than the rendered doc
    3) if possible, compare class checksum?
If a class needs update, add it and all its subclasses to a Set of classes that should be updated.

Traverse "Classes/" folder in the updateAll path iteration as usual to catch updated class helpfiles, remove such classes from the Set above.

Then, for each class in the should-update Set:
    - does the class have a help-file? then parse it. (NOTE: should look in all HelpSource/Classes dirs)
    - if not, generate stub.
    - then render to HTML
Note that this will also handle any undocumented classes.. (rename handleUndocumentedClasses to checkClassUpdates).

Only update categories and document JSON index if the docMap changed from last run.

* should we ship pre-rendered help with the binary? (render after building supercollider)
just use the pre-rendered help until the users need to update help, which would first copy or hard-link the pre-rendered files into user location and then run SCDoc.updateAll. let SCDoc.helpClientDir return helpTargetDir if existent, else a system-wide location.

* should we post progress messages or keep them in internal log and use external GUI to poll this?
or at least have an option to pop up a GUI progress dialog. is there a quick way to count the number of documents so we can
get accurate progress information? perhaps collect the file trees first, then traverse..

* should we even run ScDoc.updateAll in a separate process?

* fix or deprecate all old help classes and methods

-------------------------------------------

- automatically create links for ClassNames in everything but link:: tags:
//        if(("^\\b[A-Z][A-Za-z_0-9]+".matchRegexp(word) and: {word.asSymbol.asClass.notNil})
//        and: {current.isNil or: {current.tag!=\link}}) {
//            tree.add((tag:\link, display:\inline, text:"Classes/"++word, children:nil));
//        } {
Did not work in the parser when the word is inside something else than prose..
Need to do this in the renderer, something like this:

    x = "hello SinOsc=1.23; Foo.someMethod(BarBa2);";
    y = "";
    z = 0;
    x.findRegexp("\\b[A-Z][A-Za-z_0-9]+").do {|m|
        y = y + x.copyRange(z,m[0]-1);
        y = y + "<" ++ m[1] ++ ">";
        z = m[0] + m[1].size;
    };
    y.postln;


- this doesn't work as it should:

modalrangetag:: blah blah blah
blah blah blah blah blah
blah blah ::

- this doesn't work as it should:

hello

soft::there::

- tags after each other doesn't work, like returns::link::hello::
perhaps hard to fix without taking into account if the tag needs closing or not?
for example, what does this mean: code::foo::link::bar::

- some classes uses *doesNotUnderstand trick for class methods
make a redirect:: tag that sets the name of the classvar holding the implementing class?

- using \::. doesn't work, needs a space: \:: .
also sometimes non-letters after :: doesn't work correctly, like "(link::hello::)"

- we need to distinguish between class and instance method anchors since some classes have both named the same,
something like #cmethod:name and #imethod:name perhaps? or #*classmethodname and #instancemethodname ?

- in methods overview, print '*' before classes implementing the method as classmethod?

- check for system-wide pre-rendered docs in ScDoc.findClassOrMethod and similar functions..
also make a ScDoc.findHelp(subdir,name,anchor) which would return the path to the helpfile. examples:
    ScDoc.findHelp("Classes","SinOsc")
    ScDoc.findHelp("Overviews","Methods","play")
    ScDoc.findHelp("","Search","^asString$"), etc...

- instead of showing "(extension)" only for classes, do it for any document that was located in an extension directory.
pass a flag to recurseHelpSource call in findExtHelp, and let updateFile return the doc map entry so we can set installed=\extension,
or pass the flag to updateFile and then to addToDocMap?
also add a check and warning for when a class file location and doc location is not the same in regards of extension or not?

- currently all auto-generated docs are not included in the docMap, we could add these manually to HelpSystem,
  or put them (and Help.html) in a tag named Help?
  add them to docmap *before* we generate the overviews that are using categories.

- description for categories? HelpSource/category_descriptions, example:
  Server>Abstractions: Client-side classes representing server-side stuff
  show in header and category browser/overview..
  extensions should be able to add such descriptions too, but not overwrite existing descriptions?

- handle formula:: tag. generate a hash hexstring for use as filename, HelpSource/formulas/xxxxxxxx.png
The renderer would render formula:: by displaying that image if it exists, if not and if LaTeX is installed, convert formula to image first. if LaTeX not installed and image don't exist, show the latex code. (use img alt text?) 

- comments (* like this? *)

- can setters have more than one arg? if so, we should fix rendering of setters.

- cross-platform: check all uses of systemCmd. move to Platform class?

- add argument:: for all args on methods even if the author didn't document it? at least check that argument names and order are correct.

- shortcuts for links to class:method? methodlink::Node#set:: renders as Node:set

- better error handling in parser on bogus input, etc..

- render binary op methods differently? like ArrayedCollections ++
we don't want it to display as "++ (aCollection)" do we? rather "++ aCollection" or "this ++ that" or something..
binary ops only uses chars from this list: !@%&*-+=|<>?/

- Handle methods added by extensions
Documenting added methods could be done in files named +ClassName.schelp
before we render each class, we need to find all +ClassName.schelp files and merge their parsed node tree with the current class.
We should probably find these files first and keep their full paths in a dictionary with classname as key.
note that they should *add* to classmethods and instancemethods instead of creating new sections for these..

- validation pass:

* Some tags should only be allowed once. like class, title, related, categories, summary, description, examples..
Also, they should only occur in the root node.

* private:: should come before any other method

* force class reference filename to be equal to class name

* check method argument names (and order?). it's ok to skip arguments though..

* make sure ## and || only happens inside lists/tables

