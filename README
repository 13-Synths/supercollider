New SC documentation system
===========================

INSTALLATION
------------
All ScDoc classes are in ScDoc.sc, copy or symlink this to your Extensions folder.


USAGE
-----
To render and generate all docs:

ScDoc.helpSourceDir = "/path/to/HelpSource";
ScDoc.updateAll(false);

Now all your rendered HTML help is in ScDoc.helpTargetDir (default is ~/share/SuperCollider/Help on Linux, and ~/Application Support/SuperCollider/Help on OSX)

to render just one file:

ScDoc.helpSourceDir = "/path/to/HelpSource";
ScDoc.readDocMap;
ScDoc.updateFile("/path/to/HelpSource/and/your/file.schelp",true);

See these generated helpfiles for more info about ScDoc:

- Help/Reference/ScDocSyntax.html
- Help/Guides/WritingHelp.html
- Help/Classes/ScDoc.html
- Help/Classes/ScDocParser.html
- Help/Classes/ScDocRenderer.html

TODO
----

- this doesn't work:
modalrangetag:: blah blah blah
blah blah blah blah blah
blah blah ::

or:

hello

soft::there::

- make sure the new undocumented-method-generation works as it should for:
  only setter
  getter and setter
  only getter
  
- use addUndocumentedMethods also for undocumented classes?

- description for categories? HelpSource/category_descriptions, example:
  Server>Abstractions: Client-side classes representing server-side stuff
  
  show in header and category browser/overview

  extensions should be able to add such descriptions too, but not overwrite existing descriptions?

- handle formula:: tag. generate a hash hexstring for use as filename, HelpSource/formulas/xxxxxxxx.png
The renderer would render formula:: by displaying that image if it exists, if not and if LaTeX is installed, convert formula to image first. if LaTeX not installed and image don't exist, show the latex code. (use img alt text?) 

- comments (* like this? *)

- can setters have more than one arg? if so, we should fix rendering of setters.

- cross-platform: check all uses of systemCmd. move to Platform class?

- add argument:: for all args on methods even if the author didn't document it? at least check that argument names and order are correct.

- shortcuts for links to class:method? methodlink::Node#set:: renders as Node:set

- better error handling in parser on bogus input, etc..

- render binary op methods differently? like ArrayedCollections ++
we don't want it to display as "++ (aCollection)" do we? rather "++ aCollection" or "this ++ that" or something..
binary ops only uses chars from this list: !@%&*-+=|<>?/

- Render the argument string in method overview? Could be different for different classes though..
  One way would be that the index is just an alphabetical list of links to Methods/methodname,
  which is a generated doc with a list of all classes implementing it (and the description of that method in that class?),
  if HelpSource/Methods/methodname.schelp exists, merge with this so can write interface style documentation?
  This would produce a lot of files though!

- render to string instead of directly to file?

- Handle methods added by extensions
Documenting added methods could be done in files named +ClassName.schelp
before we render each class, we need to find all +ClassName.schelp files and merge their parsed node tree with the current class.
We should probably find these files first and keep their full paths in a dictionary with classname as key.
note that they should *add* to classmethods and instancemethods instead of creating new sections for these..

- validation pass:

* Some tags should only be allowed once. like class, title, related, categories, summary, description, examples..
Also, they should only occur in the root node.

* private:: should come before any other method

* force class reference filename to be equal to class name

* check method argument names (and order?). it's ok to skip arguments though..

* make sure ## and || only happens inside lists/tables

