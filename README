New SC documentation system, work in progress
=============================================
Much more information can be read here: https://docs.google.com/document/edit?id=13jY-FLhwFYgzGFVTSb31eTZOsxl77eVLxuCIsXcZ7BE&hl=en&authkey=CJu58MQJ

The markup language parser is in ScDoc.sc, copy or symlink this to your Extensions folder.
Try it like this:

p = ScDocParser.new
p.parseFile("/home/lijon/Coding/ScDoc/test.sch").dump

p.parse("section:: foo\nhello").dump

TODO
====

- things got a bit messy with :: closing both inline and block tags.. for example, table row must now be a separator instead
of a parent element (perhaps not a big deal), and :: will close any tag, including stuff like section:: (could be fixed
by having a flag for "closable" or something like that? or do we need a stack for this?)

Perhaps I would prefer this syntax:

here is some code::inlined:: stuff.
code::
  here is a block of code...
::code

So :: just closes any open inline tag, while ::tag can only close the specified tag...
for the sake of consistence, inline tags could _optionally_ be closed with an explicit closing tag like link:: this ::link .

- we should handle tabs in a consistent way.. regard them as whitespace? but then we need to pass them through..
or just convert them to N spaces?

- better handling of optional whitespace with inline tags.
  currently this does not link[[ work ]]!
  but this link[[does]]!
  and this link[[ too ]] !
  this does link[[probably not]] work?

"foo[[bar]]?".findRegexp("([a-z]+\\[\\[)(.+)(\\]\\])(.*)")[1..];
"foo[[bar]]".findRegexp("([a-z]+\\[\\[)(.+)(\\]\\])(.*)")[1..];

"foo[[bar".findRegexp("([a-z]+\\[\\[)(.+)")[1..];

"bar]]".findRegexp("(.+)(\\]\\])(.*)")[1..];
"bar]]?".findRegexp("(.+)(\\]\\])(.*)")[1..];

- Grab introspection data for methods, arguments, class inheritance, etc..
should this be done in the parser, filled into the tree later, or added while rendering?

- Overview generations:
  All documents alphabetically
  All documents by categories
  All documents by keywords
  All classes by inheritance tree
  All classes alphabetically
  All classes by categories
  All ugens alphabetically
  All ugens by categories
  All methods

- Code to traverse a directory tree of doc source files and render into another directory tree, checking time-stamps to see if files need update or not.

- Handle extensions (extra classes and method additions)
should merge stuff into the tree before parsing..

- HTML renderer.

VALIDATION
----------
docType must be the first tag, so that it can control which tags are allowed? Or do a separate validation pass afterwards?

Some tags should only be allowed once. like class, title, related, keywords, summary, description, methods, examples..
Keep a dictionary with tag occurence count?

THOUGHTS
========

- since inline[[ ]] tags dont nest currently, should they be modal?

- currently, table columns and list items are just separated by ## tags.
One could also put the items as children inside the ## tags.. would this be better? perhaps no..
Should we do the same for table row::? just put single row:: tags as separators instead of putting the columns
as children to row?

- tables, lists and numberedLists could have a single closing tag like ::end since the closing tags do the exact same thing.

- currently there's no support for nested inline tags. And is this really needed?

- all block-style tags should start the line.

- split prose in multiple elements by blank lines in the parser, or handle them in the renderer?


