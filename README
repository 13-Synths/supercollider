New SC documentation system
===========================

INSTALLATION
------------
All ScDoc classes are in ScDoc.sc, copy or symlink this to your Extensions folder.


USAGE
-----
To render and generate all docs:

x = ScDoc.new;
x.helpSourceDir = "/home/lijon/Coding/ScDoc/HelpSource";
x.updateAll(false);

Now all your rendered HTML help is in x.helpTargetDir (default is ~/share/SuperCollider/Help on Linux)

See these generated helpfiles for more info about ScDoc:

- Help/Reference/ScDocSyntax.html
- Help/Guides/WritingHelp.html
- Help/Classes/ScDoc.html
- Help/Classes/ScDocParser.html
- Help/Classes/ScDocRenderer.html

TODO
----
- can setters have more than one arg? if so, we should fix rendering of setters.

- cross-platform: check all uses of systemCmd. move to Platform class?

- add argument:: for all args on methods even if the author didn't document it? also check that argument names are correct.

- move ScDoc:updateAll and stuff like that to classmethods/variables. Also put all utility-functions in ScDoc..
ScDocRenderer:simplifyName, ScDocRenderer:escapeSpecialChars (?), ScDoc:splitList, 
also move all overview functions to ScDoc.

- table of contents? just include a maketoc:: tag in the doc header..
what we do is find all section, description, classmethods, instancemethods, examples, subsection tags and generate a tree
of anchor links to these.

- better error handling in parser on bogus input, etc..

- allow note:: and warning:: to have other tags inside them.. get children until newline, instead of using .text.

- render binary op methods differently? like ArrayedCollections ++
we don't want it to display as "++ (aCollection)" do we? rather "++ aCollection" or "this ++ that" or something..
binary ops only uses chars from this list: !@%&*-+=|<>?/

- Render the argument string in method overview? Could be different for different classes though..
  One way would be that the index is just an alphabetical list of links to Methods/methodname,
  which is a generated doc with a list of all classes implementing it (and the description of that method in that class?),
  if HelpSource/Methods/methodname.schelp exists, merge with this so can write interface style documentation?
  This would produce a lot of files though!

HTML renderer stuff:
- render to string instead of directly to file?
- handle prose before first section in class doc? or don't allow it..
- other sections not allowed in class doc?

- Handle extensions (quarks, plugins, etc)
should merge stuff into the tree before parsing. Look in Extensions/HelpSource? or TheQuark/HelpSource, etc..
documenting added methods could be done in files named +ClassName.schelp
before we render each class, we need to find all +ClassName.schelp files and merge their parsed node tree with the current class.
probably the best way is to first recursively search for these and add them to a dictionary with classname as key.
and first, search for all HelpSource dirs and add these to an array. The paths to start with are:
thisProcess.platform.classLibraryDir (perhaps no need for recursive search)
thisProcess.platform.systemExtensionDir
thisProcess.platform.userExtensionDir

- validation pass:

* Some tags should only be allowed once. like class, title, related, categories, summary, description, methods, examples..
Also, they should only occur in the root node.

* force class reference filename to be equal to class name

* check that no sections are used in class reference, and that no text is before the description/methods/examples..

* make sure ## and || only happens inside lists?

