New SC documentation system
===========================

INSTALLATION
------------
All ScDoc classes are in ScDoc.sc, copy or symlink this to your Extensions folder.


USAGE
-----
To render and generate all docs:

x = ScDoc.new;
x.helpSourceDir = "/home/lijon/Coding/ScDoc/HelpSource";
x.updateAll(false);

Now all your rendered HTML help is in x.helpTargetDir (default is ~/share/SuperCollider/Help on Linux)

See these generated helpfiles for more info about ScDoc:

- Help/Reference/ScDocSyntax.html
- Help/Guides/WritingHelp.html
- Help/Classes/ScDoc.html
- Help/Classes/ScDocParser.html
- Help/Classes/ScDocRenderer.html

TODO
----
- can setters have more than one arg? if so, we should fix rendering of setters.

- cross-platform: check all uses of systemCmd.

- table of contents? just include a maketoc:: tag in the doc header..
what we do is find all section, description, classmethods, instancemethods, examples, subsection tags and generate a tree
of anchor links to these.

- better error handling in parser on bogus input, etc..

- force class ref filename to be equal to class name?

- allow note:: and warning:: to have other tags inside them.. need something like nested single-line that takes text.

- list undocumented methods automagically in each class? At the end of the doc..
Also make tags for privateClassMethods:: and privateInstanceMethods::, and an option in ScDoc if those should be included or not.

- render binary op methods differently? like ArrayedCollections ++
we don't want it to display as "++ (aCollection)" do we? rather "++ aCollection" or "this ++ that" or something..
binary ops only uses chars from this list: !@%&*-+=|<>?/

- Render the argument string in method overview? Could be different for different classes though..
  One way would be that the index is just an alphabetical list of links to Methods/methodname,
  which is a generated doc with a list of all classes implementing it (and the description of that method in that class?),
  if HelpSource/Methods/methodname.schelp exists, merge with this so can write interface style documentation?
  This would produce a lot of files though!

HTML renderer stuff:
- render to string instead of directly to file?
- handle prose before first section in class doc?
- other sections not allowed in class doc?

- Handle extensions (extra classes and method additions)
should merge stuff into the tree before parsing..? and mark method additions somehow so we can distinguish them visually in the rendered output. perhaps name the files +ClassName.schelp and only document the added methods, and let scdoc merge these..
from where?

- validation pass:
start by looking up the docType tag in the tree (root level), then we know which tags are allowed and not.

Some tags should only be allowed once. like class, title, related, keywords, summary, description, methods, examples..
Keep a dictionary with tag occurence count?

Also make sure ## and || only happens inside lists?

- parser: Don't split by lines but pass newlines to handleWord and let it call endLine for us? and inc lineno..
important: then we must check if the whitespace-word contains newline... (or create a regex rule that matches single newlines?)
also let handleWord inc wordno..
note: we could then also match blank lines by regex "\n\n*" and pass them to handleWord to split prose nodes.

