# -*- coding: utf-8 -*-
#
# SCons build system
# Copyright (C) 2009 Tim Blechmann
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

Import("env")

sources = Split("""
BinaryOpUGens.cpp
ChaosUGens.cpp
DelayUGens.cpp
DemandUGens.cpp
DynNoiseUGens.cpp
FilterUGens.cpp
GendynUGens.cpp
GrainUGens.cpp
IOUGens.cpp
LFUGens.cpp
MulAddUGens.cpp
NoiseUGens.cpp
OscUGens.cpp
PanUGens.cpp
PhysicalModelingUGens.cpp
ReverbUGens.cpp
TestUGens.cpp
TriggerUGens.cpp
UnaryOpUGens.cpp
""")

sources = [File(x, "supercollider/Source/plugins") for x in sources]

pluginenv = Environment(SHLIBPREFIX="",
                        CFLAGS=env['CFLAGS'],
                        CCFLAGS=env['CCFLAGS'],
                        CXXFLAGS=env['CXXFLAGS'],
                        LIBS=Split("m pthread stdc++")
                        )
pluginenv.Append(CPPDEFINES=['SUPERNOVA', 'NOVA_SIMD'],
                 CPPPATH=["supercollider/Headers/plugin_interface",
                          "supercollider/Headers/common",
                          "supercollider/Headers/server",
                          "supercollider/xtralibs/include/nova-simd",
                          "#source",
                          "#libs/boost",
                          "#libs/boost_lockfree",
                          "#libs/nova-tt",
                          ],
                 CXXFLAGS=Split("-fno-finite-math-only")
                 )

if not env['debug']:
    pluginenv.Append(CPPDEFINES = "NDEBUG")

plugins = []

for source in sources:
    plugin_name = source.abspath.split('/')[-1][:-4]
    plugin = pluginenv.SharedLibrary(plugin_name, source)
    plugins.append(plugin)


scfft_sources = Split("""supercollider/Source/common/SC_fftlib.cpp
                         supercollider/Source/plugins/SCComplex.cpp""")

#todo: later build a shared libary
scfftobjs = [env.SharedObject(x,
                             CPPPATH=env["CPPPATH"] + ["supercollider/Headers/common",
                                                       "supercollider/Headers/plugin_interface"
                             ],
                             )
            for x in scfft_sources]

scfftenv = pluginenv.Clone()
scfftenv.Append(LIBS="fftw3f")

fft_plugins = dict()

fft_plugins["FFT_UGens"] = Split("FFTInterfaceTable.cpp FFT_UGens.cpp PV_UGens.cpp PartitionedConvolution.cpp")
fft_plugins["PV_ThirdParty"] = Split("Convolution.cpp FFT2InterfaceTable.cpp FeatureDetection.cpp PV_ThirdParty.cpp")
fft_plugins["UnpackFFTUGens"] = Split("UnpackFFTUGens.cpp")

for plugin in fft_plugins:
    name = plugin
    sources = [File(x, "supercollider/Source/plugins") for x in fft_plugins[plugin] ]
    plugins.append(scfftenv.SharedLibrary(name, sources + scfftobjs))


mlsources = Split("""ML.cpp Loudness.cpp BeatTrack.cpp Onsets.cpp onsetsds.c KeyTrack.cpp MFCC.cpp
                     BeatTrack2.cpp ML_SpecStats.cpp""")
mlsources = [File(x, "supercollider/Source/plugins") for x in mlsources]
ml_plugins = scfftenv.SharedLibrary("ML_UGens", mlsources + scfftobjs)

plugins.append(ml_plugins)


diskio_env = pluginenv.Clone()
diskio_sources = Split("supercollider/Source/plugins/DiskIO_UGens.cpp supercollider/Source/server/SC_SyncCondition.cpp")
diskio_plugins = diskio_env.SharedLibrary("DiskIO_UGens", diskio_sources)

plugins.append(diskio_plugins)


uisources = Split("KeyboardUGens.cpp MouseUGens.cpp")
uisources = [File(x, "supercollider/Source/plugins") for x in uisources]
ui_env = pluginenv.Clone()
ui_env.Append(LIBS="X11")

for source in uisources:
    plugin_name = source.abspath.split('/')[-1][:-4]
    plugin = ui_env.SharedLibrary(plugin_name, source)
    plugins.append(plugin)

Return("plugins")
