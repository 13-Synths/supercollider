# -*- coding: utf-8 -*-
#
# SCons build system
# Copyright (C) 2005, 2006, 2007, 2008  Tim Blechmann
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.


######################################################################
#
# source files
#
import SCons.Node.FS
import os, stat

Import("env")
Import("prog")

env = env.Clone()

# hack: order is required for pch!
env.Append(CPPPATH=Dir('.'))
env.Append(CPPPATH=Dir('#source'))

######################################################################
#
# collect libraries
#

BuildDir('libs', '../libs', duplicate=0)

libsources, libbuildsource = SConscript("libs/SConscript", exports="env")

######################################################################
#
# build server
#
def build_nova_server():
    server_sources = env.SConscript("server/SConscript", "env")

    if env['compact_build']:
        used_libsources = libbuildsource
        used_sources = server_sources[1] + server_sources[3]
    else:
        used_libsources = libsources
        used_sources = server_sources[0] + server_sources[2]

    server_cflags = env['CCFLAGS']+'-fvisibility=hidden';

    objects = [env.StaticObject(x, CCFLAGS=server_cflags) for x in used_sources]
    lib_objects = [env.StaticObject(x, CCFLAGS=server_cflags) for x in used_libsources]

    if env.get('pch', False):
        env['Gch'] = pch = env.Gch(File('server/server.hpp'))[0]

        for obj in objects:
            env.Depends(obj[0], pch)

    program = env.Program("nova_server", objects+lib_objects, CCFLAGS=server_cflags)

    return program


######################################################################

binary = build_nova_server()

Export("env")

Return("binary")
