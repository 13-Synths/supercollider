# -*- coding: utf-8 -*-
#
# SCons build system, linux specific part
# Copyright (C) 2006, 2007, 2009 Tim Blechmann
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

import os

Import("env env_specific")


def independent():
    ######################################################################
    #
    # linux-specific options

    opt = Options('options.cache.linux')
    opt.AddOptions(
        BoolOption('pch', 'use gcc\'s precompiled headers', False),
        BoolOption('icc', 'Use intel c compiler', False),
        BoolOption('warn', 'Display warnings', False),
        BoolOption("strip", "Strip symbols from binaries", False),
        BoolOption("strict", "Compile with strict interpretation of the c++ standard", False),
        BoolOption("debug_release", "Compile release with debugging symbols and frame pointer", False),
        BoolOption("omit_frame_pointer", "compile with -fomit-frame-pointer (seems to be broken on gcc-4.1)", False),
        BoolOption("debug_stl", "compile debug build with stl debugging features", False),
        BoolOption("sse41", "compile with sse4.1 support", False),
        BoolOption("sse42", "compile with sse4.2 support", False),
        ('arch', 'Optimize for specific architecture', None),
        ('cc', 'c comiler', None),
        ('cxx', 'c++ comiler', None),
        ('prefix', 'install prefix', '/usr/local'),
        ('python_version', 'version of Python', None),
        )

    opt.Update(env)

    opt.Save('options.cache.linux',env)
    Help(opt.GenerateHelpText(env))


    ######################################################################
    #
    # c++ compiler support

    if env.has_key('cxx') and env['cxx'] not in Split("no none No None"):
        env.Replace(CXX = env['cxx'])

    if env.has_key('cc') and env['cc'] not in Split("no none No None"):
        env.Replace(CC = env['cc'])


    try:
        os.environ['CXX']
        print "the CXX environment variable is ignored, please set the compiler with the cxx option"
    except:
        pass

    ######################################################################
    #
    # icc support

    if env['icc']:
        env.Replace(CC="icc",
                    SHCC="icc",
                    CXX="icc",
                    LINK="icc",
                    SHCXX="icc",
                    SHLINK="icc",
                    )
        env.Append(LINKFLAGS="-static-libcxa")

    #    env.Append(CCFLAGS="-use-pch source/pnpd.hpp.gch")

        env.Append(CCFLAGS=" -wd444 -wd981 -wd279 -wd654 -wd1125") ## disable some warnings

    ##  env.Append(CCFLAGS=" -wd383") ## disable some more warnings



    ######################################################################
    #
    # distcc support

    try:
        env['ENV']['PATH'] = os.environ['PATH']
        env['ENV']['HOME'] = os.environ['HOME']
    except:
        pass


    ######################################################################
    #
    # linux-specific configure

    custom_checks = SConscript("SConscript.custom_checks")
    conf = env.Configure(custom_tests = custom_checks)

    if conf.CheckLibWithHeader('tbb', 'tbb/concurrent_hash_map.h','c++'):
        env.Append(CPPDEFINES=["HAVE_TBB"])

    if conf.CheckLib('dl'):
        env.Append(CPPDEFINES=["DLOPEN"])

    ######################################################################
    #
    # some flags

    conf.CheckCFlag("-pipe")
    conf.CheckCXXFlag("-ftemplate-depth-4096")

    ## some useful warnings on gcc
    conf.CheckCXXFlag("-Wnon-virtual-dtor")
    #conf.CheckCXXFlag("-Wstrict-overflow")
    #conf.CheckCXXFlag("-Wunused")

    if env.get('strict', False):
        conf.CheckCFlag("-ansi")
        conf.CheckCFlag("-pedantic")

    if env.get('warn', False):
        #conf.CheckCFlag("-Wsign-compare")
        conf.CheckCFlag("-Wconversion")
        conf.CheckCFlag("-Winline")
        conf.CheckCFlag("-Wall")
        conf.CheckCFlag("-Wno-unused-parameter")
        conf.CheckCFlag("-Wno-reorder")

        #conf.CheckCFlag("-Wabi")
        #conf.CheckCFlag("-Wextra")

    if env.get('sse41', False):
        conf.CheckCFlag("-msse4.1")

    if env.get('sse42', False):
        conf.CheckCFlag("-msse4.2")

    env['libnova_extra_linkflags'] = ['-Wl,-E']

    conf.Finish()



def specific():
    custom_checks = SConscript("SConscript.custom_checks")
    conf = env.Configure(custom_tests = custom_checks)

    if env.get('debug', False):
        conf.CheckCFlag("-g")
    else:
        ## we need to increase the inline limit for the template metaprogramming
        conf.CheckCFlag("-finline-limit-2500")
        conf.CheckCFlag("-ftree-vectorize")
        conf.CheckCFlag("-ffast-math")
        conf.CheckCFlag("-frename-registers")

        conf.CheckCFlag("-funsafe-loop-optimizations")
        conf.CheckCFlag("-Wunsafe-loop-optimizations")

        ## this shouldn't be necessary, we're already forcing the inlining of specific functions
        #conf.CheckCFlag("--param large-function-growth=1000")
        #conf.CheckCFlag("--param inline-unit-growth=1000")

        if env.get('debug_release', False):
            conf.CheckCFlag("-g")
            conf.CheckCFlag("-O2")
        else:
            conf.CheckCFlag("-O3")      # -O3 seems to generate bad code in gcc-4.2.2
            if env.get('omit_frame_pointer', False):
                conf.CheckCFlag("-fomit-frame-pointer")

        if env.get('strip', False):
            env.Append(LINKFLAGS=["-Wl,--strip-all"])


    if env.get('arch', False):
        if env['arch'] not in ["False", "None", "0"]:
            conf.CheckCFlag("-march=" + env['arch'])

    if env.get('simd', True):
        conf.CheckCFlag("-mfpmath=sse")
        conf.CheckCFlag("-msse")

    conf.Finish()

if env_specific:
    specific()
else:
    independent()
