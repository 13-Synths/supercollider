# -*- coding: utf-8 -*-
#
# SCons build system for the test suite
# Copyright (C) 2005, 2006, 2007, 2008, 2009  Tim Blechmann
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

import SCons.Node.FS

Import("env")

rbtest = env.Program("ringbuffer_test",
                     [File("ringbuffer_test.cpp"), File("../libs/guid/libs/guid/src/guid.cpp"),
                      File("../libs/guid/libs/guid/src/sha1/sha1.cpp")],
                     CCFLAGS="-O3",
                     CPPDEFINES="",
                     OBJSUFFIX='.rbtest.o',
                     LIBS='boost_thread-mt')

rbtest_fixed = env.Program("ringbuffer_fixed_test",
                           [File("ringbuffer_test.cpp"), File("../libs/guid/libs/guid/src/guid.cpp"),
                            File("../libs/guid/libs/guid/src/sha1/sha1.cpp")],
                           CCFLAGS="-O3",
                           OBJSUFFIX='.rbtest_fixed.o',
                           CPPDEFINES="CONST_SIZE",
                           LIBS='boost_thread-mt')

libboost_thread = Environment().StaticLibrary("boost_thread", Glob("../libs/boost/libs/thread/src/*cpp") +
                                              Glob("../libs/boost/libs/thread/src/pthread/*cpp")+
                                              ["../libs/boost/libs/system/src/error_code.cpp"],
                                              CPPPATH="#/libs/boost")

libboost_fs = Environment().StaticLibrary("boost_fs", Glob("../libs/boost/libs/filesystem/src/*cpp"),
                                          CPPPATH="#/libs/boost")

if env['optimize_testsuite']:
    unit_test_cflags = env['CCFLAGS'] + "-O3 -Wall"
else:
    unit_test_cflags = "-g -Wall"



unit_test_env = Environment(LIBS=["pthread", "sndfile", libboost_thread, libboost_fs, 'dl'] + env['LIBS'],
                            CC=env['CC'], CXX=env['CXX'],
                            CPPPATH=["#libs/boost", "#libs/sparsehash-0.6/src", "#libs/libatomic_ops/src", "#libs",
                                     "#source", "#libs/intrusive", "#libs/boost_lockfree", "#libs/oscpack", "#libs/pri_queue",
                                     "#libs/tlsf/src", "#libs/endian"],
                            CCFLAGS=unit_test_cflags,
                            CPPDEFINES=["SUPERNOVA"] + env['CPPDEFINES'])

scsynth_src, sc_paths = unit_test_env.SConscript("../source/sc/SConscript.server", "env")
unit_test_env.Append(CPPPATH = sc_paths)

unit_test_common = ["boost_test.cpp",
                    "#libs/tlsf/src/tlsf.c",
                    "#libs/oscpack_build.cpp",
                    "#libs/gnuplot-cpp/gnuplot_i.cc"
                    ]

# simple standalone tests
unit_test_sources = ["mutex_test.cpp",
                     "rw_mutex_test.cpp",
                     "string_resource_test.cpp",
                     "interpolation.cpp",
                     "parameter.cpp",
                     "dsp_ringbuffer_test.cpp",
                     "map1d_test.cpp",
                     "env_follower_test.cpp",
                     "fast_sinosc_test.cpp",
                     "lag_test.cpp",
                     "noise_test.cpp",
                     "muladd_helpers_test.cpp",
                     "xfade_test.cpp",
                     "approximation_test.cpp",
                     "spin_lock_test.cpp",
                     "interpolated_value_test.cpp",
                     "filter.cpp",
                     "callback_interpreter_system.cpp",
                     "timetag_test.cpp",
                     "timer_system_test.cpp",
                     "ticket_scheduler_test.cpp",
                     "simple_pool_test.cpp",
                     "static_allocator_test.cpp",
                     "static_pool_test.cpp",
                     "tl_allocator_test.cpp",
                     "osc_dispatcher_test.cpp",
                     "osc_server_test.cpp",
                     "median_noise_tests.cpp",
                     #"perf_counter_test.cpp",
                     "buffer_manager_test.cpp",
                     "sized_array_test.cpp",
                     "sc_synthdef_test.cpp",
                     "control_bus_test.cpp",
                     ]



simd_benchmark = unit_test_env.Program("simd_benchmark", ["dsp_simd_benchmarks.cpp"],
                                       LIBS=["stdc++"],
                                       CPPPATH=["#source"],
                                       CCFLAGS='-O3 -march=nocona -mfpmath=sse -ftemplate-depth-4096')

median_benchmark = unit_test_env.Program("median_filter_benchmarks", ["median_filter_benchmarks.cpp"],
                                         CCFLAGS='-O3 -march=nocona -mfpmath=sse -ftree-vectorize')

unit_tests = [unit_test_env.Program(test[:-4],
                                    [test] + unit_test_common,
                                    )
              for test in unit_test_sources]

#tests, requiring the server object files
nova_server_test_sources = ["server_node_graph_test.cpp",
                            "server_dsp_thread_queue_test.cpp",
                            "server_dsp_thread_test.cpp",
                            "server_scheduler_test.cpp",
                            "server_synth_test.cpp",
                            "server_synth_factory_test.cpp",
                            "server_test.cpp",
                            "server_ugen_test.cpp",
                            "server_sc_osc_handler_test.cpp",
                            "sc_synth_prototype_test.cpp",
                            "sc_plugin_loader_test.cpp",
                            ]

nova_server_sources = env.SConscript("#/source/server/SConscript", "env")[1] # use combined sources

nova_server_libs = unit_test_common

nova_server_libs = [unit_test_env.Object(x) for x in nova_server_libs]
nova_server_sources = [unit_test_env.Object(x) for x in nova_server_sources]

nova_server_test = [unit_test_env.Program(test[:-4],
                                          [test] + nova_server_sources + nova_server_libs + scsynth_src,
                                          )
                    for test in nova_server_test_sources]


audio_test_sources = ["audio_backend_test.cpp",
                      "audio_frontend_test.cpp",
                      ]

audio_testsuite = unit_test_env.Program("audio_testsuite", audio_test_sources,
                                        CPPDEFINES = "HAVE_PORTAUDIO",
                                        LIBS=["portaudio", "portaudiocpp", libboost_thread]
                                        )

def runUnitTest(env,target,source):
    import subprocess
    app = str(source[0].abspath)
    if not subprocess.call(app):
        open(str(target[0]),'w').write("PASSED\n")
    else:
        return 1

def runUnitTestValgrind(env,target,source):
    import subprocess
    app = str(source[0].abspath)
    if not subprocess.call(["valgrind", "--error-exitcode=1", "--suppressions=suppressions", "--leak-check=full",
                            "--show-reachable=yes", app]):
        open(str(target[0]),'w').write("PASSED\n")
    else:
        return 1

run_tests = nova_server_test + unit_tests #+ [audio_testsuite]

testsuite = list()
valgrind_tests = list()

for test in run_tests:
    test = test[0]
    passed = "#" + test.path + ".passed"
    vgpassed = "#" + test.path + ".vgpassed"
    testsuite.append(Command(passed, test, runUnitTest))
    valgrind_tests.append(Command(vgpassed, test, runUnitTestValgrind))
    Depends(passed, test)

unit_test = [unit_tests, nova_server_test, audio_testsuite]

Alias("run_tests", testsuite)
Alias("run_valgrind", valgrind_tests)

Return("unit_test_sources unit_test")
