class:: SCDoc
summary:: Help system main class
categories:: HelpSystem
related:: Classes/SCDocParser, Classes/SCDocRenderer, Guides/WritingHelp, Reference/SCDocSyntax

DESCRIPTION::
SCDoc manages the SuperCollider documentation system, by traversing the directory tree of help sourcefiles and rendering them
to the help target directory. It also generates different overviews.

It uses link::Classes/SCDocParser:: for parsing and link::Classes/SCDocRenderer:: for rendering.

The syntax reference for the documentation markup language can be found here: link::Reference/SCDocSyntax::.

A guide to writing help can be found here: link::Guides/WritingHelp::.

SUBSECTION:: Basic usage
Update all help-files and overviews:
code::
SCDoc.helpSourceDir = "/path/to/HelpSource";
SCDoc.updateAll;
::

To force an update of unchanged files, use code::updateAll(true):: or remove code::helpTargetDir/scdoc_cache::

CLASSMETHODS::
private:: initClass, addToDocMap, makeCategoryMap, makeMethodList, makeOverviews, postProgress, docMapToJSON, handleUndocumentedClasses, writeDocMap

method:: p
The default link::Classes/SCDocParser:: object, created automatically.
method:: r
The default link::Classes/SCDocRenderer:: object, created automatically.

method:: helpSourceDir
get/set the base directory of help sourcefiles. Defaults to code:: thisProcess.platform.systemAppSupportDir +/+ "/HelpSource" ::

method:: helpTargetDir
get/set the help target directory. Defaults to code:: thisProcess.platform.userAppSupportDir +/+ "/Help" ::

method:: updateAll
Render all help-files that need updating and generate overviews and cached metadata index.
returns:: this class
argument:: force
Force updating of all files.
argument:: doneFunc
Function to evaluate when done.
argument:: threaded
When true, runs the process in a link::Classes/Routine:: on link::Classes/AppClock::. This is needed to get progress feedback when running inside a frontend like the SuperCollider app on OSX. If running with the sclang terminal client, this can be set to false for better performance.
argument:: gui
If true and code::threaded:: is also true, create a GUI progress window instead of posting progress to the post window.
discussion:: It traverses the directory tree recursively starting at code::helpSourceDir::, parsing and rendering all *.schelp files and copying all other files. The output goes to an equal directory layout in code::helpTargetDir::.

method:: updateFile
Update a single file.
argument:: source
The source file
argument:: rootDir
The base directory
argument:: force
Force update even if file has not changed.

method:: checkBrokenLinks
Scans the entire help tree for broken links

method:: findClassOrMethod
returns::
the full path to the document for a specific class if the string starts with capital letter, or the method overview if not.

subsection:: Cached map of documents
In the maps below, each document is represented by an link::Classes/Event:: with the keys code::path, title, categories, summary, installed::. More keys might come later..

code::updateAll:: also writes the document map in JSON format to code::docmap.js:: and a list of all methods and their implementing classes to code::methods.js::

method:: docMap
Returns the internal dictionary of documents.
returns:: An internal link::Classes/Dictionary::
discussion::
The returned Dictionary is indexed by the documents path relative helpSourceDir, and without file suffix. Like code::Classes/SCDoc::.

This dictionary is cached in code::helpTargetDir/scdoc_cache::.
 
method:: categoryMap
Returns an internal dictionary of all categories.
returns:: An internal link::Classes/Dictionary::
discussion:: The keys are category symbols, and each value is a link::Classes/List:: of Events representing each document.

method:: readDocMap
Reads the cached document map from file. 

subsection:: Utilities

method:: splitList
Split a comma-separated string into an array of whitespace-stripped strings, useful to parse the contents of tags like code::categories\:::: and code::related\::::.
argument:: txt
The string to split.
returns:: An link::Classes/Array:: of whitespace-stripped strings.

method:: makeArgString
Returns:: A link::Classes/String:: representing the arguments (with defaults) for a link::Classes/Method::.

method:: classHasArKrIr
argument:: c
The link::Classes/Class:: to check.
Returns:: code::true:: if the class responds to ar, kr or ir classmethods.

