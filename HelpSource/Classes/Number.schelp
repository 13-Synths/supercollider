class:: Number
summary:: Mathematical quantity
categories:: Math
related:: Guides/Tour-of-Special-Functions

description::
Number represents a mathematical quantity.

instancemethods::

subsection:: Math

method:: +
Addition.

method:: -
Subtraction.

method:: *
Multiplication.

method:: /
Division.

method:: div
Integer division.

method:: %
Modulo.

method:: **
Exponentiation.


subsection:: Polar Coordinate Support

method:: rho
Answer the polar radius of the number.

method:: theta
Answer the polar angle of the number.


subsection:: Complex Number Support

method:: real
Answer the real part of the number.

method:: imag
Answer the imaginary part of the number.


subsection:: Conversion

method:: @
Create a new link::Classes/Point:: whose x coordinate is the receiver and whose y coordinate is aNumber.

method:: complex
Create a new link::Classes/Complex:: number whose real part is the receiver with the given imaginary part.

method:: polar
Create a new link::Classes/Polar:: number whose radius is the receiver with the given angle.


subsection:: Iteration

method:: for
Calls strong::function:: for numbers from this up to endval, inclusive, stepping each time by 1.
argument:: endValue
a link::Classes/Number::.
argument:: function
a link::Classes/Function:: which is passed two arguments, the first which is an number from this to
argument:: endval, and the second which is a number from zero to the number of iterations minus one.

method:: forBy
Calls strong::function:: for numbers from this up to endval stepping each time by step.
argument:: endValue
a link::Classes/Number::.
argument:: stepValue
a link::Classes/Number::.
argument:: function
a link::Classes/Function:: which is passed two arguments, the first which is an number from this to
endval, and the second which is a number from zero to the number of iterations minus one.

method:: forSeries
Calls strong::function:: for numbers from this up to endval stepping each time by a step specified by second.
argument:: second
a link::Classes/Number::.
argument:: last
a link::Classes/Number::.
argument:: function
a link::Classes/Function:: which is passed two arguments, the first which is an number from this to
endval, and the second which is a number from zero to the number of iterations minus one.


SECTION:: Special Functions

A variety of Special Functions are supplied by the Boost C++ library. The library's
LINK::http://www.boost.org/doc/libs/1_66_0/libs/math/doc/html/special.html##online documentation::
 serves as the primary reference for the following functions. The methods
here match closely with those found in the source library, as do argument names.

Below you'll find descriptions of the functions and their bounds, but for
visualizing the functions, have a look in link::Guides/Tour-of-Special-Functions::.

NOTE::
The following methods are documented in the style of a generic function call
rather than an instance method. That is to say, the style shown here
suggests the usage: code::foo(a, b)::, though the method could equivalently
be called by: code::a.foo(b)::
::

WARNING::
Many of the functions are only valid in certain numerical ranges. For the most part, error handling
happens in the underlying boost functions. While these errors are often obtuse, you'll usually find
a useful message at the end of the error regarding proper ranges and the erroneous value supplied.
Refer to the online documentation for more detailed descriptions, and the
link::Guides/Tour-of-Special-Functions:: for plots showing ranges and asymptotes.
::


SUBSECTION:: Number Series
Take a tour of link::Guides/Tour-of-Special-Functions#Number Series#Number Series::.

METHOD:: bernouliB2n (n)
Returns the (2*code::n::)th Bernoulli number.

Because all odd numbered Bernoulli numbers are zero
(apart from B(1) which is -1/2) the interface will only
return the even numbered Bernoulli numbers.

METHOD:: tangentT2n (i)
Returns a single tangent number at code::i::. Also called a zag function.


SUBSECTION:: Gamma Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Gamma Functions#Gamma Functions::.

METHOD:: tgamma (z)
Returns the "true gamma" of value code::z::.

METHOD:: tgamma1pm1 (dz)
Returns code::gamma(dz + 1) - 1::.

METHOD:: lgamma (z)
Returns the natural logarithm of the gamma function.

METHOD:: digamma (z)
Returns the digamma or psi function of code::z::.

Digamma is defined as the logarithmic derivative of the gamma function.

METHOD:: trigamma (z)
Returns the trigamma function of code::z::.

Trigamma is defined as the derivative of the digamma function.

METHOD:: polygamma (n, z)
Returns the polygamma function of code::z::.

Polygamma is defined as the code::n::'th derivative of the digamma function.

METHOD:: tgammaRatio (a, b)
Returns the ratio of gamma functions code::tgamma(a) / tgamma(b)::.

METHOD:: tgammaDeltaRatio (a, delta)
Returns the ratio of gamma functions code::tgamma(a) / tgamma(a+delta)::.

METHOD:: gammaP (a, z)
Returns the normalised lower incomplete gamma function.

Requires code::a:: > 0 and code::z:: >= 0.

METHOD:: gammaQ (a, z)
Returns the normalised upper incomplete gamma function.

Requires code::a:: > 0 and code::z:: >= 0.

METHOD:: tgammaLower (a, z)
Returns the full (non-normalised) lower incomplete gamma function.

Requires code::a:: > 0 and code::z:: >= 0.

METHOD:: tgammaUpper (a, z)
Returns the full (non-normalised) upper incomplete gamma function.

Requires code::a:: > 0 and code::z:: >= 0.

METHOD:: gammaPInv (a, p)
Returns a value such that code::p = gamma_p(a, x)::.

Requires code::a:: > 0 and 1 >= code::p,q:: >= 0.

METHOD:: gammaQInv (a, q)
Returns a value x such that code::q = gamma_q(a, x)::.

Requires code::a:: > 0 and 1 >= code::p,q:: >= 0.

METHOD:: gammaPInvA (x, p)
Returns a value such that code::p = gamma_p(a, x)::.

Requires code::x:: > 0 and 1 >= code::p,q:: >= 0.

METHOD:: gammaQInvA (x, q)
Returns a value x such that code::q = gamma_q(a, x)::.

Requires code::x:: > 0 and 1 >= code::p,q:: >= 0.

METHOD:: gammaPDerivative (a, x)
Implements the partial derivative with respect to x of the incomplete gamma function (lower).

METHOD:: gammaQDerivative (a, x)
Implements the partial derivative with respect to x of the incomplete gamma function (upper).



SUBSECTION:: Factorials and Binomial Coefficients
Take a tour of link::Guides/Tour-of-Special-Functions#Factorials and Binomial Coefficients#Factorials and Binomial Coefficients::.

METHOD:: factorial (i)
Returns code::i!::.
Note::Becuase of the code::factorial:: method on
code::Integer::, you'll need to cast code::i:: to a float to use this method.::

WARNING::code::factorial:: will overflow if code::i > 170::::

METHOD:: doubleFactorial (i)
Returns code::i!!::.

For strong::even:: code::i::, code::i !! = i(i-2)(i-4)(i-6) ... (4)(2)::.

For strong::odd:: code::i::, code::i !! = i(i-2)(i-4)(i-6) ... (3)(1)::.

METHOD:: risingFactorial (x, i)
Returns the rising factorial of code::x:: and code::i:::

code::x(x+1)(x+2)(x+3)...(x+i-1)::

Both code::x:: and code::i:: can be negative as well as positive.

METHOD:: fallingFactorial (x, i)
Returns the falling factorial of code::x:: and code::i:::

code::x(x-1)(x-2)(x-3)...(x-i+1)::

This function is only defined for positive code::i::. Argument code::x:: can be either positive or negative.

METHOD:: binomialCoefficient (n, k)
Requires code::k:: <= code::n::.



SUBSECTION:: Beta Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Beta Functions#Beta Functions::.

METHOD:: beta (a, b)
The beta function is defined by: code::tgamma(a)*tgamma(b) / tgamma(a+b)::.

METHOD:: ibeta (a, b, x)
Returns the normalised incomplete beta function of code::a::, code::b:: and code::x::.

Require 0 <= code::x:: <= 1, code::a,b:: >= 0, and in addition that not both code::a:: and code::b:: are zero.

METHOD:: ibetaC (a, b, x)
Returns the normalised complement of the incomplete beta function of code::a::, code::b:: and code::x::.

Require 0 <= code::x:: <= 1, code::a,b:: >= 0, and in addition that not both code::a:: and code::b:: are zero.

METHOD:: betaFull (a, b, x)
Returns the full (non-normalised) incomplete beta function of code::a::, code::b:: and code::x::.

Require 0 <= code::x:: <= 1, and code::a,b:: > 0.

METHOD:: betaIFullC (a, b, x)
Returns the full (non-normalised) complement of the incomplete beta function of code::a::, code::b:: and code::x::.

Require 0 <= code::x:: <= 1, and code::a,b:: > 0.

METHOD:: ibetaInv (a, b, p)
Returns a value code::x:: such that: code::p = ibeta(a, b, x)::.

Requires code::a,b:: > 0 and 0 <= code::p:: <= 1.

METHOD:: ibetaCInv (a, b, q)
Returns a value code::x:: such that: code::q = ibetaC(a, b, x)::.

Requires code::a,b:: > 0 and 0 <= code::q:: <= 1.

METHOD:: ibetaInvA (b, x, p)
Returns a value code::a:: such that: code::p = ibeta(a, b, x)::.

Requires code::b:: > 0, 0 < code::x:: < 1, and 0 <= code::p:: <= 1.

METHOD:: ibetaCInvA (b, x, q)
Returns a value code::a:: such that: code::q = ibetaC(a, b, x)::.

Requires code::b:: > 0, 0 < code::x:: < 1, and 0 <= code::q:: <= 1.

METHOD:: ibetaInvB (b, x, p)
Returns a value code::b:: such that: code::p = ibeta(a, b, x)::.

Requires code::a:: > 0, 0 < code::x:: < 1, and 0 <= code::p:: <= 1.

METHOD:: ibetaCInvB (b, x, q)
Returns a value code::b:: such that: code::q = ibetaC(a, b, x)::.

Requires code::a:: > 0, 0 < code::x:: < 1, and 0 <= code::q:: <= 1.

METHOD:: ibetaDerivative (a, b, x)
Returns the partial derivative with respect to code::x:: of the incomplete
beta function code::ibeta(a,b,x)::.



SUBSECTION:: Error Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Error Functions#Error Functions::.

METHOD:: erf (z)
Returns the error function of code::z::.

METHOD:: erfC (z)
Returns the complement of the error function of code::z::.

METHOD:: erfInv (z)
Returns the inverse error function of code::z::, that is a value code::x:: such that:

code::p = erf(x)::.

METHOD:: erfCInv (z)
Returns the inverse of the complement of the error function of code::z::,
that is a value code::x:: such that:

code::p = erfC(x)::



SUBSECTION:: Polynomials
Take a tour of link::Guides/Tour-of-Special-Functions#Polynomials#Polynomials::.

METHOD:: legendreP (l, x)
Returns the Legendre Polynomial of the first kind.

Requires -1 <= code::x:: <= 1.

METHOD:: legendrePPrime (l, x)
Returns the derivatives of the Legendre polynomials.

METHOD:: legendrePZeros (l)
Since the Legendre polynomials are alternatively even and odd, only the
non-negative zeros are returned. For the odd Legendre polynomials, the
first zero is always zero. The rest of the zeros are returned in increasing order.

METHOD:: legendrePAssoc (n, m, x)
Returns the associated Legendre polynomial of the first kind.

Requires -1 <= code::x:: <= 1.

METHOD:: legendreQ (l, x)
Returns the value of the Legendre polynomial that is the
second solution to the Legendre differential equation.

Requires -1 <= code::x:: <= 1.

METHOD:: laguerre (n, x)
Returns the value of the Laguerre Polynomial of order code::n:: at point code::x::.

METHOD:: laguerreAssoc (n, m, x)
Returns the Associated Laguerre polynomial of degree of dgree code::n:: and order code::m:: at point code::x::.

METHOD:: hermite (n, x)
Returns the value of the Hermite Polynomial of order code::n:: at point code::x::.

METHOD:: chebyshevT (n, x)
Returns the Chebyshev polynomials of the first kind.

METHOD:: chebyshevU (n, x)
Returns the Chebyshev polynomials of the second kind.

METHOD:: chebyshevTPrime (n, x)
Returns the derivatives of the Chebyshev polynomials of the first kind.

METHOD:: chebyshevTZeros (n)
Returns the roots (zeros) of the code::n::-th Chebyshev polynomial of the first kind.

METHOD:: sphericalHarmonic (n, m, theta, phi)
Returns the (code::Complex::) value of the Spherical Harmonic.

code::theta:: is taken as the polar (colatitudinal) coordinate within code::[0, pi]::,
and code::phi:: as the azimuthal (longitudinal) coordinate within code::[0,2pi]::.

See boost documentation for further information, including a note about the
Condon-Shortley phase term of code::(-1)^m::.

METHOD:: sphericalHarmonicR (n, m, theta, phi)
Returns the real part of the Spherical Harmonic.

METHOD:: sphericalHarmonicI (n, m, theta, phi)
Returns the imaginary part of the Spherical Harmonic.


SUBSECTION:: Bessel Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Bessel Functions#Bessel Functions::.

METHOD:: cylBesselJ (v, x)
Returns the result of the Bessel functions of the first kind.

The functions return the result of code::domain_error:: whenever the result is
undefined or complex. This occurs when code::x < 0:: and code::v:: is
not an integer, or when code::x == 0:: and code::v != 0::.

METHOD:: cylNeumann (v, x)
Returns the result of the Bessel functions of the second kind.

The functions return the result of code::domain_error:: whenever the result is
undefined or complex. This occurs when code::x <= 0::.

METHOD:: cylBesselJZero (v, index)
Returns a single zero or root of the Bessel function of the first kind.

code::index:: is a 1-based index of zero of the cylindrical Bessel function of order code::v::.

METHOD:: cylNeumannZero (v, index)
Returns a single zero or root of the Neumann function (Bessel function of the second kind).

code::index:: is a 1-based index of zero of the cylindrical Neumann function of order code::v::.

METHOD:: cylBesselI (v, x)
Returns the result of the modified Bessel functions of the first kind.

METHOD:: cylBesselK (v, x)
Returns the result of the modified Bessel functions of the second kind.

Requires code::x > 0::.

METHOD:: sphBessel (v, x)
Returns the result of the spherical Bessel functions of the first kind.

Requires code::x:: > 0.

METHOD:: sphNeumann (v, x)
Returns the result of the spherical Bessel functions of the first kind.

Requires code::x:: > 0.

METHOD:: cylBesselJPrime (v, x)
Returns the first derivative with respect to x of the corresponding Bessel function.

METHOD:: cylNeumannPrime (v, x)
Returns the first derivative with respect to x of the corresponding Neumann function.

Requires code:: x > 0::.

METHOD:: cylBesselIPrime (v, x)
Returns the first derivative with respect to x of the corresponding Bessel function.

METHOD:: cylBesselKPrime (v, x)
Returns the first derivative with respect to x of the corresponding Bessel function.

Requires code:: x > 0::.

METHOD:: sphBesselPrime (v, x)
Returns the first derivative with respect to x of the corresponding Bessel function.

Requires code:: x > 0::.

METHOD:: sphNeumannPrime (v, x)
Returns the first derivative with respect to x of the corresponding Neumann function.

Requires code:: x > 0::.



SUBSECTION:: Hankel Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Hankel Functions#Hankel Functions::.

METHOD:: cylHankel1 (v, x)
Returns the result of the Hankel functions of the first kind.

METHOD:: cylHankel2 (v, x)
Returns the result of the Hankel functions of the second kind.

METHOD:: sphHankel1 (v, x)
Returns the result of the spherical Hankel functions of the first kind.

METHOD:: sphHankel2 (v, x)
Returns the result of the spherical Hankel functions of the second kind.



SUBSECTION:: Airy Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Airy Functions#Airy Functions::.

METHOD:: airyAi (x)
Returns the result of the Airy function Ai at code::x::.

METHOD:: airyBi (x)
Returns the result of the Airy function Bi at code::x::.

METHOD:: airyAiPrime (x)
Returns the derivative of the Airy function Ai at code::x::.

METHOD:: airyBiPrime (x)
Returns the derivative of the Airy function Bi at code::x::.

METHOD:: airyAiZero (m)
Returns the code::m::th zero or root of the Airy Ai function. The Airy Ai
function has an infinite number of zeros on the negative real axis.

code::m:: is 1-based.

METHOD:: airyBiZero (m)
Returns the code::m::th zero or root (1-based) of the Airy Bi function. The Airy Bi
function has an infinite number of zeros on the negative real axis.

code::m:: is 1-based.



SUBSECTION:: Elliptic Integrals
Take a tour of link::Guides/Tour-of-Special-Functions#Elliptic Integrals#Elliptic Integrals::.

METHOD:: ellintRf (x, y, z)
Returns Carlson's Elliptic Integral RF.

Requires that code::x,y >= 0::, with at most one of them zero, and that code::z >= 0::.

METHOD:: ellintRd (x, y, z)
Returns Carlson's Elliptic Integral RD.

Requires that code::x,y >= 0::, with at most one of them zero, and that code::z >= 0::.

METHOD:: ellintRj (x, y, z, p)
Returns Carlson's Elliptic Integral RJ.

Requires that code::x,y,z >= 0::, with at most one of them zero, and that code::p != 0::.

METHOD:: ellintRc (x, y)
Returns Carlson's Elliptic Integral RC.

Requires that code::x >= 0::, with at most one of them zero, and that code::y != 0::.

METHOD:: ellintRg (x, y, z)
Returns Carlson's Elliptic Integral RG.

Requires that code::x,y >= 0::.

METHOD:: ellint1 (k, phi)
Returns the incomplete elliptic integral of the first kind, Legendre form.

Requires code::-1 <= k <= 1::.

METHOD:: ellint1C (k)
Returns the complete elliptic integral of the first kind, Legendre form.

Requires code::-1 <= k <= 1::.

METHOD:: ellint2 (k, phi)
Returns the incomplete elliptic integral of the second kind, Legendre form.

Requires code::-1 <= k <= 1::.

METHOD:: ellint2C (k)
Returns the complete elliptic integral of the second kind, Legendre form.

Requires code::-1 <= k <= 1::.

METHOD:: ellint3 (k, n, phi)
Returns the incomplete elliptic integral of the third kind, Legendre form.

Requires code::-1 <= k <= 1:: and code::n < 1/sin^2(phi)::.

METHOD:: ellint3C (k, n)
Returns the complete elliptic integral of the third kind, Legendre form.

Requires code::-1 <= k <= 1:: and code::n < 1::.

METHOD:: ellintD (k, phi)
Returns the incomplete elliptic integral strong::D(phi, k)::, Legendre form.

Requires code::-1 <= k <= 1::.

METHOD:: ellintDC (k)
Returns the complete elliptic integral strong::D(phi, k)::, Legendre form.

Requires code::-1 <= k <= 1::.

METHOD:: jacobiZeta (k, phi)
Returns the result of the Jacobi Zeta Function.

Requires code::-1 <= k <= 1::.

METHOD:: heumanLambda (this, phi)
Returns the result of the Heuman Lambda Function.

Requires code::-1 <= k <= 1::.



SUBSECTION:: Jacobi Elliptic Functions

Like all elliptic functions, these can be parameterised in a number of ways:

LIST::
##In terms of a parameter code::m::.
##In terms of the elliptic modulus code::k:: where code::m = k^2::.
##In terms of the modular angle code::α::, where code::m = sin2α::.
::
This implementation takes the elliptic modulus code::k:: as the parameter.
In addition the variable code::u:: is used to express an amplitude strong::φ::.
All take the elliptic modulus as the first argument - this is for alignment with the link::#Elliptic Integrals::.

Take a tour of link::Guides/Tour-of-Special-Functions#Jacobi Elliptic Functions#Jacobi Elliptic Functions::.

METHOD:: jacobiCd, jacobiCn, jacobiCs, jacobiDc, jacobiDn, jacobiDs, jacobiNc, jacobiNd,  jacobiNs, jacobiSc, jacobiSd, jacobiSn (k, u)



SUBSECTION:: Zeta Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Zeta Functions#Zeta Functions::.

METHOD:: zeta (z)
Returns the zeta function of code::z::.

Requires code::z != 1::.



SUBSECTION:: Exponential Integrals
Take a tour of link::Guides/Tour-of-Special-Functions#Exponential Integrals#Exponential Integrals::.

METHOD:: expintEn (n, z)
Returns the exponential integral En of code::z::.

Requires that when code::n == 1::, code::z !=0::.

METHOD:: expintEi (z)
Returns the exponential integral of code::z::.

Requires code::z != 0::.



SUBSECTION:: Basic Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Basic Functions#Basic Functions::.

METHOD:: sinPi (x)
Returns code::sin(x * π)::.

METHOD:: cosPi (x)
Returns code::cos(x * π)::.

METHOD:: log1p (x)
Returns the natural logarithm of code::x+1::.

METHOD:: expm1 (x)
Returns code::e^x - 1::.

METHOD:: cbrt (x)
Returns the cube root of code::x::.

METHOD:: sqrt1pm1 (x)
Returns code::sqrt(1+x) - 1::.

METHOD:: powm1 (x, y)
Returns code::x^y - 1::.


SUBSECTION:: Sinus Cardinal (Sinc) and Hyperbolic Sinus Cardinal Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Sinus Cardinal (Sinc) and Hyperbolic Sinus Cardinal Functions, Inverse Hyperbolic Functions#Sinus Cardinal (Sinc) and Hyperbolic Sinus Cardinal Functions::.

METHOD:: sincPi (x)
Returns the Sinus Cardinal of code::x::. Also known as the "sinc" function.

code::sincPi(x) = sin(x) / x::

METHOD:: sinhcPi (x)
Returns the Hyperbolic Sinus Cardinal of code::x::.

code::sinhcPi(x) = sinh(x) / x::


SUBSECTION:: Inverse Hyperbolic Functions
Take a tour of link::Guides/Tour-of-Special-Functions#Sinus Cardinal (Sinc) and Hyperbolic Sinus Cardinal Functions, Inverse Hyperbolic Functions#Inverse Hyperbolic Functions::.

METHOD:: asinh (x)
Returns the reciprocal of the hyperbolic sine function at code::x::.

METHOD:: acosh (x)
Returns the reciprocal of the hyperbolic cosine function at code::x::.

Requires code::x >= 1::.

METHOD:: atanh (x)
Returns the reciprocal of the hyperbolic sine function at code::x::.

Requires code::-1 < x < 1::.


SUBSECTION:: Owen's T Function
Take a tour of link::Guides/Tour-of-Special-Functions#Owen#Owen's T Function::.

METHOD:: owensT (h, a)
Returns the Owens T function of code::h:: and code::a::.


PRIVATE:: acosh, airyAi, airyAiPrime, airyAiZero, acosh, airyAi, airyAiPrime, airyAiZero, airyBi, airyBiPrime, airyBiZero, asinh, atanh, bernouliB2n, beta, betaFull, betaFullC, binomialCoefficient, cbrt, chebyshevT, chebyshevTPrime, chebyshevTZeros, chebyshevU, cosPi, cylBesselI, cylBesselIPrime, cylBesselJ, cylBesselJPrime, cylBesselJZero, cylBesselK, cylBesselKPrime, cylHankel1, cylHankel2, cylNeumann, cylNeumannPrime, cylNeumannZero, digamma, doubleFactorial, ellint1, ellint1C, ellint2, ellint2C, ellint3, ellint3C, ellintD, ellintDC, ellintRc, ellintRd, ellintRf, ellintRg, ellintRj, erf, erfC, erfCInv, erfInv, expintEi, expintEn, expm1, factorial, fallingFactorial, gammaP, gammaPDerivative, gammaPInv, gammaPInvA, gammaQ, gammaQDerivative, gammaQInv, gammaQInvA, hermite, heumanLambda, ibeta, ibetaC, ibetaCInv, ibetaCInvA, ibetaCInvB, ibetaDerivative, ibetaInv, ibetaInvA, ibetaInvB, jacobiCd, jacobiCn, jacobiCs, jacobiDc, jacobiDn, jacobiDs, jacobiNc, jacobiNd, jacobiNs, jacobiSc, jacobiSd, jacobiSn, jacobiZeta, laguerre, laguerreAssoc, legendreP, legendrePAssoc, legendrePPrime, legendrePZeros, legendreQ, lgamma, log1p, owensT, polygamma, pow, powm1, prHermite, prLaguerreAssoc, prLegendreQ, risingFactorial, sinPi, sincPi, sinhcPi, sphBessel, sphBesselPrime, sphHankel1, sphHankel2, sphNeumann, sphNeumannPrime, sphericalHarmonic, sphericalHarmonicI, sphericalHarmonicR, sqrt1pm1, tangentT2n, tgamma, tgamma1pm1, tgammaDeltaRatio, tgammaLower, tgammaRatio, tgammaUpper, trigamma, zeta
